document.addEventListener("DOMContentLoaded", function() {
    // DOM Elements
    const celsiusInput = document.getElementById("celsius");
    const fahrenheitResult = document.getElementById("fahrenheit-result");
    const copyBtn = document.getElementById("copy-btn");
    const validationMessage = document.getElementById("validation-message");
    const historyList = document.getElementById("history-list");
    const clearHistoryBtn = document.getElementById("clear-history");
    const historyContainer = document.querySelector(".history-container");
    const exampleCards = document.querySelectorAll(".example-card");
    const steps = document.querySelectorAll(".step");

    // Conversion history from localStorage or empty array
    let conversionHistory = JSON.parse(localStorage.getItem("conversionHistory")) || [];

    // Temperature conversion function
    function convertTemperature(celsius) {
        // Clear previous error messages
        validationMessage.textContent = "";
        
        // Handle empty input
        if (celsius === "" || celsius === null || celsius === undefined) {
            fahrenheitResult.textContent = "--";
            copyBtn.style.display = "none";
            return false;
        }

        const celsiusValue = parseFloat(celsius);
        
        // Validate input is a number
        if (isNaN(celsiusValue)) {
            fahrenheitResult.textContent = "--";
            copyBtn.style.display = "none";
            validationMessage.textContent = "Please enter a valid number";
            return false;
        }
        
        // Validate absolute zero
        if (celsiusValue < -273.15) {
            fahrenheitResult.textContent = "--";
            copyBtn.style.display = "none";
            validationMessage.textContent = "Temperature cannot be below absolute zero (-273.15°C)";
            return false;
        }
        
        // Perform conversion
        const fahrenheit = (celsiusValue * 9/5) + 32;
        const roundedFahrenheit = Math.round(fahrenheit * 100) / 100; // Keep 2 decimal places
        
        // Update result display
        fahrenheitResult.textContent = `${roundedFahrenheit}°F`;
        copyBtn.style.display = "inline-flex";
        
        // Add to history
        addToHistory(celsiusValue, roundedFahrenheit);
        
        // Update step visualizations
        updateStepVisualizations(celsiusValue, roundedFahrenheit);
        
        return true;
    }

    // Add conversion to history
    function addToHistory(celsius, fahrenheit) {
        // Avoid adding duplicate conversions
        if (conversionHistory.length > 0 && 
            conversionHistory[0].celsius === celsius && 
            conversionHistory[0].fahrenheit === fahrenheit) {
            return;
        }

        conversionHistory.unshift({
            celsius: celsius,
            fahrenheit: fahrenheit
        });
        
        // Limit history size
        if (conversionHistory.length > 10) {
            conversionHistory = conversionHistory.slice(0, 10);
        }
        
        // Save and render history
        saveHistory();
        renderHistory();
    }

    // Save history to localStorage
    function saveHistory() {
        try {
            localStorage.setItem("conversionHistory", JSON.stringify(conversionHistory));
        } catch (e) {
            console.error("Error saving to localStorage:", e);
            // Fallback: try saving only last 5 entries
            try {
                localStorage.setItem("conversionHistory", JSON.stringify(conversionHistory.slice(-5)));
            } catch (e) {
                console.error("Failed to save reduced history:", e);
            }
        }
    }

    // Render history list
    function renderHistory() {
        historyList.innerHTML = "";
        
        // Hide history container if no conversions exist
        if (conversionHistory.length === 0) {
            historyContainer.style.display = "none";
            return;
        }
        
        // Show history container when we have conversions
        historyContainer.style.display = "block";
        
        conversionHistory.forEach(item => {
            const li = document.createElement("li");
            li.className = "history-item";
            li.textContent = `${item.celsius}°C = ${item.fahrenheit}°F`;
            li.setAttribute("role", "button");
            li.setAttribute("tabindex", "0");
            li.setAttribute("aria-label", `Apply ${item.celsius}°C to ${item.fahrenheit}°F conversion`);
            
            li.addEventListener("click", () => {
                celsiusInput.value = item.celsius;
                convertTemperature(item.celsius);
                celsiusInput.focus();
            });
            
            li.addEventListener("keydown", (e) => {
                if (e.key === "Enter" || e.key === " ") {
                    e.preventDefault();
                    celsiusInput.value = item.celsius;
                    convertTemperature(item.celsius);
                    celsiusInput.focus();
                }
            });
            
            historyList.appendChild(li);
        });
    }

    // Update step-by-step visualization
    function updateStepVisualizations(celsius, fahrenheit) {
        const step1Viz = document.getElementById("step1-viz");
        const step2Viz = document.getElementById("step2-viz");
        const step3Viz = document.getElementById("step3-viz");
        
        if (step1Viz) {
            step1Viz.textContent = `${celsius} × 9/5 = ${(celsius * 9/5).toFixed(2)}`;
        }
        
        if (step2Viz) {
            step2Viz.textContent = `${(celsius * 9/5).toFixed(2)} + 32 = ${fahrenheit.toFixed(2)}`;
        }
        
        if (step3Viz) {
            step3Viz.textContent = `Final result: ${fahrenheit.toFixed(2)}°F`;
        }
    }

    // Initialize event listeners
    function initEventListeners() {
        // Input handling with debounce
        const debouncedConvert = debounce(() => {
            convertTemperature(celsiusInput.value);
        }, 300);
        
        celsiusInput.addEventListener("input", debouncedConvert);
        celsiusInput.addEventListener("change", () => convertTemperature(celsiusInput.value));
        
        // Copy button functionality
        copyBtn.addEventListener("click", () => {
            if (fahrenheitResult.textContent === "--") return;
            
            const textToCopy = fahrenheitResult.textContent;
            
            navigator.clipboard.writeText(textToCopy).then(() => {
                // Show success feedback
                const originalText = copyBtn.querySelector(".btn-text").textContent;
                copyBtn.querySelector(".btn-text").textContent = "Copied!";
                
                setTimeout(() => {
                    copyBtn.querySelector(".btn-text").textContent = originalText;
                }, 2000);
            }).catch(err => {
                console.error("Failed to copy:", err);
                // Fallback method
                const textarea = document.createElement("textarea");
                textarea.value = textToCopy;
                document.body.appendChild(textarea);
                textarea.select();
                document.execCommand("copy");
                document.body.removeChild(textarea);
                
                // Still show success feedback
                const originalText = copyBtn.querySelector(".btn-text").textContent;
                copyBtn.querySelector(".btn-text").textContent = "Copied!";
                
                setTimeout(() => {
                    copyBtn.querySelector(".btn-text").textContent = originalText;
                }, 2000);
            });
        });
        
        // Clear history button
        clearHistoryBtn.addEventListener("click", () => {
            conversionHistory = [];
            saveHistory();
            renderHistory();
        });
        
        // Example card clicks
        exampleCards.forEach(card => {
            card.addEventListener("click", () => {
                const value = card.getAttribute("data-value");
                if (value) {
                    celsiusInput.value = value;
                    convertTemperature(value);
                }
            });
        });
        
        // Step visualization clicks
        steps.forEach(step => {
            step.addEventListener("click", () => {
                // Toggle active step
                steps.forEach(s => s.classList.remove("active"));
                step.classList.add("active");
                
                // Update visualization if we have input
                if (celsiusInput.value) {
                    convertTemperature(celsiusInput.value);
                }
            });
        });
    }

    // Debounce function for input events
    function debounce(func, wait) {
        let timeout;
        return function() {
            const context = this, args = arguments;
            clearTimeout(timeout);
            timeout = setTimeout(() => {
                func.apply(context, args);
            }, wait);
        };
    }

    // Main initialization
    function init() {
        // Set up event listeners
        initEventListeners();
        
        // Render existing history
        renderHistory();
        
        // Check for URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const celsiusParam = urlParams.get('celsius');
        
        if (celsiusParam) {
            celsiusInput.value = celsiusParam;
            convertTemperature(celsiusParam);
        } else if (celsiusInput.value) {
            // Handle browser autofill values
            convertTemperature(celsiusInput.value);
        }
        
        // Focus the input field
        celsiusInput.focus();
    }

    // Start the application
    init();
});